/**
 * @author WMXPY
 * @overview generated by ghoti-cli
 * @fileoverview Component set Print
 */

import * as React from 'react';

import Config from '../../config/config';
import { IEach, IList, IParsed, IPicture } from './interface';

import logo from '../../renderer/pages/logo';
import repairBaseLogo from './repairbaseLogo';

import * as fs from 'fs';
import * as path from 'path';

export interface IProps {
    content: IParsed;
    updateContent: (newContent: IParsed) => void;
    repairBaseId: string;
}

const s = {
    td: {
        border: '1px solid black',
    },
    th: {
        textAlign: 'center',
        border: '1px solid black',
    },
    div: {
        padding: '3px',
    },
    entireDiv: {
        border: '1px solid black',
    },
    topDiv: {
        textAlign: 'center',
        fontWeight: 'bold',
    },
    tdInvisable: {
        border: '1px solid black',
    },
    tdPicture: {
        borderLeft: '1px solid black',
        borderRight: '1px solid black',
        borderTop: '0',
        borderBottom: '0',
    },
    lowDiv: {

    },
};

export class Edit extends React.Component<IProps, {}> {
    public constructor(props) {
        super(props);
        this.mapCategory = this.mapCategory.bind(this);
        this.mapStuff = this.mapStuff.bind(this);

        this.buildPicture = this.buildPicture.bind(this);
        this.mapPicture = this.mapPicture.bind(this);
        this.renderRestOfPictures = this.renderRestOfPictures.bind(this);
    }

    public render() {
        return (<div>
            <div style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
            }}>
                <div style={{
                    flex: 1,
                }}>
                    <div>
                        <img src={repairBaseLogo} alt="logo" style={{
                            width: 'auto',
                            height: '80px',
                        }} />
                    </div>
                    <div style={{
                        fontSize: '21px',
                    }}>
                        Property Address:
                    </div>
                    <div>
                        {this.props.content.name}
                    </div>
                    <div>
                        {this.props.content.address}
                    </div>
                    <div>
                        {this.props.content.city}
                    </div>
                </div>
                <div style={{ flex: 1 }}>
                    <table style={{ width: '100%' }}>
                        <tbody>
                            <tr>
                                <td style={{ width: '40%', textAlign: 'right' }}>Date:</td>
                                <td style={{ textAlign: 'right' }}>{this.props.content.bdate}</td>
                            </tr>
                            {this.props.repairBaseId ? <tr>
                                <td style={{ width: '40%', textAlign: 'right' }}>RepairBase ID:</td>
                                <td style={{ textAlign: 'right' }}>{this.props.repairBaseId}</td>
                            </tr> : void 0}
                        </tbody>
                    </table>
                </div>
            </div>
            {this.getHr()}
            <div style={{
                display: 'flex',
                alignItems: 'center',
                marginTop: '32px',
                marginBottom: '32px',
            }}>
                <div style={{ flex: 5 }}>
                    <div style={{
                        fontSize: '21px',
                    }}>Property Characteristics:</div>
                    <table style={{
                        border: "1px solid black",
                        width: '100%',
                        borderCollapse: 'collapse',
                    }}>
                        <tbody>
                        <tr style={{
            border: "1px solid black",
        }}>
        <tr>
            <td style={{
                border: "1px solid black",
                padding: '4px',
                textAlign: 'right',
            }}>Year Built</td>
            <td style={{
                border: "1px solid black",
                padding: '4px',
            }}><input value={this.props.content.year} onChange={(event) => {
                const current = this.props.content;
                current.year = event.target.value;
                
                this.props.updateContent(current);
                setTimeout(() => {
                    console.log(this.props.content);
                }, 100);
               
            }} /></td></tr>
            <tr>
             <td style={{
                border: "1px solid black",
                padding: '4px',
                textAlign: 'right',
            }}>Stories</td>
            <td style={{
                border: "1px solid black",
                padding: '4px',
            }}><input value={this.props.content.stories} onChange={(event) => {
                const current = this.props.content;
                current.stories = event.target.value;
                
                this.props.updateContent(current);
                setTimeout(() => {
                    console.log(this.props.content);
                }, 100);
               
            }} /></td></tr>
            <tr>
             <td style={{
                border: "1px solid black",
                padding: '4px',
                textAlign: 'right',
            }}>Living Area</td>
            <td style={{
                border: "1px solid black",
                padding: '4px',
            }}><input value={this.props.content.area} onChange={(event) => {
                const current = this.props.content;
                current.area = event.target.value;
                
                this.props.updateContent(current);
                setTimeout(() => {
                    console.log(this.props.content);
                }, 100);
               
            }} /></td></tr>
            <tr>
             <td style={{
                border: "1px solid black",
                padding: '4px',
                textAlign: 'right',
            }}>Total Cost</td>
            <td style={{
                border: "1px solid black",
                padding: '4px',
            }}><input value={this.props.content.totalCost} onChange={(event) => {
                const current = this.props.content;
                current.totalCost = event.target.value;
                
                
                this.props.updateContent(current);
                setTimeout(() => {
                    console.log(this.props.content);
                }, 100);
               
            }} /></td></tr>
        </tr>
                        </tbody>
                    </table>
                </div>
                <div style={{
                    flex: 1,
                    padding: '8px',
                }}>
                    <img src={logo} alt="logo" style={{
                        width: 'auto',
                        height: 'auto',
                    }} />
                </div>
                <div style={{
                    flex: 4,
                    paddingLeft: '8px',
                    paddingTop: '20px',
                    display: 'inline',
                    fontSize: '20px',
                    color: 'darkblue',
                    fontWeight: 'bold',
                }}>
                    Document presented by Repair and Preservation Network LLC.
                </div>
            </div>
            {this.getHr()}
            <div style={{
                fontSize: '21px',
                textAlign: 'center',
            }}>Repair Estimate</div>
            {this.getHr()}
            <div style={{ marginTop: '20px' }}></div>
            {this.props.content.list.map(this.mapCategory)}
            {this.renderRestOfPictures(this.props.content.unused.Exterior, 'Entire House - Exterior')}
            {this.renderRestOfPictures(this.props.content.unused.Interior, 'Entire House - Interior')}
            {this.renderRestOfPictures(this.props.content.unused.Other, 'Entire House - Others')}
            <div style={{
                marginTop: '10px',
                backgroundColor: 'black',
                color: 'white',
                width: '100%',
                textAlign: 'right',
            }}>
                Data source: Bluebook International / Generate Date: {this.props.content.bdate}
            </div>
        </div>);
    }

    protected getHr() {
        return <div style={{
            marginTop: '3px',
            marginBottom: '3px',
            height: '1px',
            backgroundColor: 'black',
        }}></div>;
    }

    protected getTr(name: string, info: string, bold?: boolean) {
        return (<tr style={{
            border: "1px solid black",
            fontWeight: bold ? "bold" : "normal",
        }}>
            <td style={{
                border: "1px solid black",
                padding: '4px',
                textAlign: 'right',
            }}>{name}</td>
            <td style={{
                border: "1px solid black",
                padding: '4px',
            }}><input value={info} onChange={(event) => {
                const current = this.props.content;
                current[name] = event.target.value;
                this.props.updateContent(current);
                setTimeout(() => {
                    console.log(this.props.content);
                }, 100);
               
            }} /></td>
        </tr>);
    }

    protected renderRestOfPictures(picList: IPicture[], name: string) {
        if (picList.length <= 0) {
            return void 0;
        }

        return (
            <div>
                <h3>{name}</h3>
                <table
                    style={{
                        width: "100%",
                        border: "1px solid black",
                        borderCollapse: "collapse",
                    }}>
                    <tbody>
                        {this.buildPicture(picList)}
                    </tbody>
                </table>
            </div>);
    }

    protected mapCategory(value: IList, index: number) {

        let total = 0;

        for (let i of value.each) {
            total += i.cost;
        }

        return (
            <div
                key={index}>
                <h3>{value.cate}</h3>
                <table
                    style={{
                        width: "100%",
                        border: "1px solid black",
                        borderCollapse: "collapse",
                    }}>
                    <thead>
                        <tr style={{
                            borderBottom: "1px solid black",
                        }}>
                            <th style={{
                                padding: "3px",
                            }}>Item
                            
                            
                            </th>
                            <th style={{
                                padding: "3px",
                            }}>Description</th>
                            <th style={{
                                padding: "3px",
                            }}>QTY</th>
                            <th style={{
                                padding: "3px",
                            }}>U/M</th>
                            <th style={{
                                padding: "3px",
                            }}>PPU</th>
                            <th style={{
                                padding: "3px",
                            }}>Cost</th>
                        </tr>
                    </thead>
                    <tbody>
                        {value.each.map(this.mapStuff)}
                        <tr style={{
                            borderBottom: "1px solid black",
                        }}>
                            <td colSpan={5} style={{
                                padding: "3px",
                                border: '1px solid black',
                                textAlign: 'right',
                                paddingRight: '8px',
                                fontWeight: 'bold',
                            }}>Area Total:</td>
                            <td style={{
                                padding: "3px",
                                border: '1px solid black',
                                fontWeight: 'bold',
                            }}>${total ? total.toFixed(2) : 0}</td>
                        </tr>
                    </tbody>
                </table>
            </div>);
    }

    protected base64_encode(file: string): string {
        /**
         * FOR MAINTAINER
         * if this.props.isprint means use is printing this page who have full access to file:// protocol
         * If not, read the file ourself and return as base64 string
         */
        if (file.length < 1) {
            return '';
        }

        let extensionName: string = path.extname(file);
        let bitmap: Buffer;

        /**
         * FOR MAINTAINER
         * This is a bad practice, use sync reading will cause big picture load stuck render thread.
         * ToFIXIT: Fix it by use async reading function, but be aware user may add picture again dring async reading, make sure to disable upload button during async file reading.
         */
        try {
            bitmap = fs.readFileSync(file);
        } catch (err) {
            return '';
        }
        let base64Image: string = new Buffer(bitmap).toString('base64');
        let imgSrcString: string = `data:image/${extensionName.split('.').pop()};base64,${base64Image}`;
        return imgSrcString;
    }

    protected mapPicture(picture: IPicture, pictureIndex: number) {
        if (!picture) {
            return void 0;
        }
        return (<div key={pictureIndex} style={{
            flex: 1,
            // minWidth: '33%',
            minWidth: '220px',
            maxWidth: '220px',
            paddingLeft: '3px',
            paddingRight: '3px',
        }} >
            <img
                style={{
                    width: '100%',
                    height: 'auto',
                }}
                src={this.base64_encode(picture.src)}
            />
            {/* <div style={{
                width: '100%',
                backgroundColor: 'white',
                color: 'black',
                border: '2px solid black',
            }}>
                <div style={{
                    margin: '3px',
                }}>{picture.name}</div>
            </div> */}
        </div>);
    }

    protected buildPicture(pictureE: IPicture[]) {
        const picture = [...pictureE];
        let pictureList: any[] = [];
        let tempList: IPicture[] = [];
        let key = 0;
        while (picture.length > 0) {
            if (tempList.length >= 3) {
                pictureList.push(<tr key={key++}>
                    <td style={(s.tdPicture as any)} colSpan={6}>
                        <div style={s.div}>
                            <div style={{
                                display: 'flex',
                                flexWrap: 'nowrap',
                                justifyContent: 'center',
                            }}>{tempList.map(this.mapPicture)}</div>
                        </div>
                    </td>
                </tr>);
                tempList = [];
            }
            tempList.push(picture.shift());
        }
        if (tempList.length > 0) {
            pictureList.push(<tr key={key}>
                <td style={(s.tdPicture as any)} colSpan={6}>
                    <div style={s.div}>
                        <div style={{
                            display: 'flex',
                            flexWrap: 'nowrap',
                            justifyContent: 'center',
                        }}>{tempList.map(this.mapPicture)}</div>
                    </div>
                </td>
            </tr>);
        }
        return pictureList;
    }

    protected mapStuff(value: IEach, index: number) {

        return (<React.Fragment key={index}>
            <tr key={value.item}>
                <td style={{
                    maxWidth: '30px',
                    padding: '3px',
                    border: '1px solid black',
                }}>{value.item}</td>
                <td style={{
                    maxWidth: '300px',
                    padding: '3px',
                    border: '1px solid black',
                }}>
                    <div>{value.description}</div>
                    {value.comments ? <div style={{
                        backgroundColor: '#dbfdff',
                        borderLeft: "5px solid #8d8dff",
                        paddingLeft: '8px',
                    }}>{value.comments}</div> : void 0}
                </td>
                <td style={{
                    padding: '3px',
                    border: '1px solid black',
                }}>{value.qty}</td>
                <td style={{
                    padding: '3px',
                    border: '1px solid black',
                }}>{value.UM}</td>
                <td style={{
                    padding: '3px',
                    border: '1px solid black',
                }}>${value.PPU}</td>
                <td style={{
                    padding: '3px',
                    border: '1px solid black',
                }}>${value.cost}</td>
                {value.image ? this.buildPicture(value.image) : void 0}
            </tr>
        </React.Fragment>);
    }
}

export default Edit;
